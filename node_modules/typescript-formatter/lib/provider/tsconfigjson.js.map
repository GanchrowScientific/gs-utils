{"version":3,"file":"tsconfigjson.js","sourceRoot":"","sources":["tsconfigjson.ts"],"names":["makeFormatCodeOptions"],"mappings":"AAAA,YAAY,CAAC;AAIb,IAAY,IAAI,WAAM,MAAM,CAAC,CAAA;AAC7B,IAAY,EAAE,WAAM,IAAI,CAAC,CAAA;AAGzB,sBAAgC,UAAU,CAAC,CAAA;AAQ3C,+BAA8C,QAAgB,EAAE,IAAa,EAAE,aAAmC;IAC9GA,YAAYA,CAACA;IAEbA,IAAIA,OAAOA,GAAGA,IAAIA,CAACA,OAAOA,GAAGA,IAAIA,CAACA,OAAOA,CAACA,IAAIA,CAACA,OAAOA,CAACA,GAAGA,IAAIA,CAACA,OAAOA,CAACA,IAAIA,CAACA,OAAOA,CAACA,QAAQA,CAACA,CAACA,CAACA;IAC/FA,IAAIA,cAAcA,GAAGA,yBAAiBA,CAACA,OAAOA,EAAEA,eAAeA,CAACA,CAACA;IACjEA,EAAEA,CAACA,CAACA,CAACA,cAAcA,CAACA,CAACA,CAACA;QAClBA,MAAMA,CAACA,aAAaA,CAACA;IACzBA,CAACA;IACDA,EAAEA,CAACA,CAACA,IAAIA,CAACA,OAAOA,CAACA,CAACA,CAACA;QACfA,OAAOA,CAACA,GAAGA,CAACA,UAAQA,cAAcA,aAAQA,QAAUA,CAACA,CAACA;IAC1DA,CAACA;IAEDA,IAAIA,MAAMA,GAAqBA,IAAIA,CAACA,KAAKA,CAAMA,EAAEA,CAACA,YAAYA,CAACA,cAAcA,EAAEA,OAAOA,CAACA,CAACA,CAACA;IACzFA,EAAEA,CAACA,CAACA,CAACA,MAAMA,CAACA,eAAeA,IAAIA,CAACA,MAAMA,CAACA,eAAeA,CAACA,OAAOA,CAACA,CAACA,CAACA;QAC7DA,MAAMA,CAACA,aAAaA,CAACA;IACzBA,CAACA;IAEDA,EAAEA,CAACA,CAACA,MAAMA,CAACA,eAAeA,CAACA,OAAOA,CAACA,WAAWA,EAAEA,KAAKA,MAAMA,CAACA,CAACA,CAACA;QAC1DA,aAAaA,CAACA,gBAAgBA,GAAGA,MAAMA,CAACA;IAC5CA,CAACA;IAACA,IAAIA,CAACA,EAAEA,CAACA,CAACA,MAAMA,CAACA,eAAeA,CAACA,OAAOA,CAACA,WAAWA,EAAEA,KAAKA,IAAIA,CAACA,CAACA,CAACA;QAC/DA,aAAaA,CAACA,gBAAgBA,GAAGA,IAAIA,CAACA;IAC1CA,CAACA;IAEDA,MAAMA,CAACA,aAAaA,CAACA;AACzBA,CAACA;AAxBD;uCAwBC,CAAA","sourcesContent":["\"use strict\";\n\nimport * as ts from \"typescript\";\n\nimport * as path from \"path\";\nimport * as fs from \"fs\";\n\nimport {Options} from \"../\";\nimport {getConfigFileName} from \"../utils\";\n\ninterface TsconfigSettings {\n    compilerOptions: {\n        newLine: string;\n    };\n}\n\nexport default function makeFormatCodeOptions(fileName: string, opts: Options, formatOptions: ts.FormatCodeOptions): ts.FormatCodeOptions {\n    \"use strict\";\n\n    let baseDir = opts.baseDir ? path.resolve(opts.baseDir) : path.dirname(path.resolve(fileName));\n    let configFileName = getConfigFileName(baseDir, \"tsconfig.json\");\n    if (!configFileName) {\n        return formatOptions;\n    }\n    if (opts.verbose) {\n        console.log(`read ${configFileName} for ${fileName}`);\n    }\n\n    let config: TsconfigSettings = JSON.parse(<any>fs.readFileSync(configFileName, \"utf-8\"));\n    if (!config.compilerOptions || !config.compilerOptions.newLine) {\n        return formatOptions;\n    }\n\n    if (config.compilerOptions.newLine.toLowerCase() === \"crlf\") {\n        formatOptions.NewLineCharacter = \"\\r\\n\";\n    } else if (config.compilerOptions.newLine.toLowerCase() === \"lf\") {\n        formatOptions.NewLineCharacter = \"\\n\";\n    }\n\n    return formatOptions;\n}\n"]}