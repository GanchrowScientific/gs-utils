{"version":3,"file":"base.js","sourceRoot":"","sources":["base.ts"],"names":["makeFormatCodeOptions"],"mappings":"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","sourcesContent":["\"use strict\";\n\nimport * as ts from \"typescript\";\n\nimport * as path from \"path\";\nimport * as fs from \"fs\";\n\nimport {Options} from \"../\";\nimport {getConfigFileName} from \"../utils\";\n\ninterface TsfmtSettings {\n    // from FormatCodeOptions\n    // コンマ区切り記号の後にスペースを追加する\n    insertSpaceAfterCommaDelimiter?: boolean;\n    // 'for' ステートメントでセミコロンの後にスペースを挿入する\n    insertSpaceAfterSemicolonInForStatements?: boolean;\n    // 二項演算子の前後にスペースを挿入する\n    insertSpaceBeforeAndAfterBinaryOperators?: boolean;\n    // 制御フローステートメント内のキーワードの後にスペースを追加する\n    insertSpaceAfterKeywordsInControlFlowStatements?: boolean;\n    // 匿名関数に対する関数キーワードの後にスペースを追加する\n    insertSpaceAfterFunctionKeywordForAnonymousFunctions?: boolean;\n    // かっこ内が空でない場合に始め括弧の後ろと終わりカッコの前にスペースを挿入する\n    insertSpaceAfterOpeningAndBeforeClosingNonemptyParenthesis?: boolean;\n    insertSpaceAfterOpeningAndBeforeClosingNonemptyBrackets?: boolean;\n    // 新しい行に関数の始め中括弧を配置する\n    placeOpenBraceOnNewLineForFunctions?: boolean;\n    // 新しい行にコントロールブロックの始め中括弧を配置する\n    placeOpenBraceOnNewLineForControlBlocks?: boolean;\n    // from EditorOptions\n    indentSize?: number;\n    // 0, 1, 2 or None, Block, Smart\n    indentStyle?: number | string;\n    tabSize?: number;\n    newLineCharacter?: string;\n    convertTabsToSpaces?: boolean;\n}\n\nexport default function makeFormatCodeOptions(fileName: string, opts: Options, formatOptions: ts.FormatCodeOptions): ts.FormatCodeOptions {\n    \"use strict\";\n\n    let baseDir = opts.baseDir ? path.resolve(opts.baseDir) : path.dirname(path.resolve(fileName));\n    let configFileName = getConfigFileName(baseDir, \"tsfmt.json\");\n    if (!configFileName) {\n        return formatOptions;\n    }\n\n    if (opts.verbose) {\n        console.log(`read ${configFileName} for ${fileName}`);\n    }\n\n    var config: TsfmtSettings = JSON.parse(<any>fs.readFileSync(configFileName, \"utf-8\"));\n    if (typeof config.insertSpaceAfterCommaDelimiter === \"boolean\") {\n        formatOptions.InsertSpaceAfterCommaDelimiter = config.insertSpaceAfterCommaDelimiter;\n    }\n    if (typeof config.insertSpaceAfterSemicolonInForStatements === \"boolean\") {\n        formatOptions.InsertSpaceAfterSemicolonInForStatements = config.insertSpaceAfterSemicolonInForStatements;\n    }\n    if (typeof config.insertSpaceBeforeAndAfterBinaryOperators === \"boolean\") {\n        formatOptions.InsertSpaceBeforeAndAfterBinaryOperators = config.insertSpaceBeforeAndAfterBinaryOperators;\n    }\n    if (typeof config.insertSpaceAfterKeywordsInControlFlowStatements === \"boolean\") {\n        formatOptions.InsertSpaceAfterKeywordsInControlFlowStatements = config.insertSpaceAfterKeywordsInControlFlowStatements;\n    }\n    if (typeof config.insertSpaceAfterFunctionKeywordForAnonymousFunctions === \"boolean\") {\n        formatOptions.InsertSpaceAfterFunctionKeywordForAnonymousFunctions = config.insertSpaceAfterFunctionKeywordForAnonymousFunctions;\n    }\n    if (typeof config.insertSpaceAfterOpeningAndBeforeClosingNonemptyParenthesis === \"boolean\") {\n        formatOptions.InsertSpaceAfterOpeningAndBeforeClosingNonemptyParenthesis = config.insertSpaceAfterOpeningAndBeforeClosingNonemptyParenthesis;\n    }\n    if (typeof config.insertSpaceAfterOpeningAndBeforeClosingNonemptyBrackets === \"boolean\") {\n        formatOptions.InsertSpaceAfterOpeningAndBeforeClosingNonemptyBrackets = config.insertSpaceAfterOpeningAndBeforeClosingNonemptyBrackets;\n    }\n    if (typeof config.placeOpenBraceOnNewLineForFunctions === \"boolean\") {\n        formatOptions.PlaceOpenBraceOnNewLineForFunctions = config.placeOpenBraceOnNewLineForFunctions;\n    }\n    if (typeof config.placeOpenBraceOnNewLineForControlBlocks === \"boolean\") {\n        formatOptions.PlaceOpenBraceOnNewLineForControlBlocks = config.placeOpenBraceOnNewLineForControlBlocks;\n    }\n    if (typeof config.indentSize === \"number\") {\n        formatOptions.IndentSize = config.indentSize;\n    }\n    if (typeof config.indentStyle === \"number\") {\n        formatOptions.IndentStyle = config.indentStyle as number;\n    } else if (typeof config.indentStyle === \"string\") {\n        formatOptions.IndentStyle = (ts.IndentStyle as any)[config.indentStyle] as number;\n    }\n    if (typeof config.tabSize === \"number\") {\n        formatOptions.TabSize = config.tabSize;\n    }\n    if (typeof config.newLineCharacter === \"string\") {\n        formatOptions.NewLineCharacter = config.newLineCharacter;\n    }\n    if (typeof config.convertTabsToSpaces === \"boolean\") {\n        formatOptions.ConvertTabsToSpaces = config.convertTabsToSpaces;\n    }\n\n    return formatOptions;\n}\n"]}