{"version":3,"file":"tslintjson.js","sourceRoot":"","sources":["tslintjson.ts"],"names":["makeFormatCodeOptions","postProcess","createDefaultAdditionalFormatCodeOptions"],"mappings":"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","sourcesContent":["\"use strict\";\n\nimport * as ts from \"typescript\";\n\nimport * as path from \"path\";\nimport * as fs from \"fs\";\n\nimport {Options} from \"../\";\nimport {getConfigFileName} from \"../utils\";\n\ninterface TslintSettings {\n    rules: {\n        indent: {\n            0: boolean;\n            1: string;\n        };\n        \"no-consecutive-blank-lines\": boolean,\n        whitespace: {\n            0: boolean;\n            1: string;\n            2: string;\n            3: string;\n            4: string;\n            5: string;\n            [key: string]: any;\n        };\n    };\n}\n\nexport interface AdditionalFormatOptions {\n    noConsecutiveBlankLines: boolean;\n}\n\nexport default function makeFormatCodeOptions(fileName: string, opts: Options, formatOptions: ts.FormatCodeOptions): ts.FormatCodeOptions {\n    \"use strict\";\n\n    let baseDir = opts.baseDir ? path.resolve(opts.baseDir) : path.dirname(path.resolve(fileName));\n    let configFileName = getConfigFileName(baseDir, \"tslint.json\");\n    if (!configFileName) {\n        return formatOptions;\n    }\n    if (opts.verbose) {\n        console.log(`read ${configFileName} for ${fileName}`);\n    }\n\n    let config: TslintSettings = JSON.parse(<any>fs.readFileSync(configFileName, \"utf-8\"));\n    if (!config.rules) {\n        return formatOptions;\n    }\n    if (config.rules.indent && config.rules.indent[0] && config.rules.indent[1] === \"spaces\") {\n        formatOptions.ConvertTabsToSpaces = true;\n    }\n    if (config.rules.whitespace && config.rules.whitespace[0]) {\n        for (let p in config.rules.whitespace) {\n            let value = config.rules.whitespace[p];\n            if (value === \"check-branch\") {\n                formatOptions.InsertSpaceAfterKeywordsInControlFlowStatements = true;\n            } else if (value === \"check-decl\") {\n                // none?\n            } else if (value === \"check-operator\") {\n                formatOptions.InsertSpaceBeforeAndAfterBinaryOperators = true;\n            } else if (value === \"check-separator\") {\n                formatOptions.InsertSpaceAfterCommaDelimiter = true;\n                formatOptions.InsertSpaceAfterSemicolonInForStatements = true;\n            } else if (value === \"check-type\") {\n                // none?\n            }\n        }\n    }\n\n    return formatOptions;\n}\n\nexport function postProcess(fileName: string, formattedCode: string, opts: Options, formatOptions: ts.FormatCodeOptions): string {\n    \"use strict\";\n\n    let baseDir = opts.baseDir ? path.resolve(opts.baseDir) : path.dirname(path.resolve(fileName));\n    let configFileName = getConfigFileName(baseDir, \"tslint.json\");\n    if (!configFileName) {\n        return formattedCode;\n    }\n\n    let config: TslintSettings = JSON.parse(<any>fs.readFileSync(configFileName, \"utf-8\"));\n    if (!config.rules) {\n        return formattedCode;\n    }\n\n    let additionalOptions = createDefaultAdditionalFormatCodeOptions();\n    if (config.rules[\"no-consecutive-blank-lines\"] === true) {\n        additionalOptions.noConsecutiveBlankLines = true;\n    }\n\n    if (additionalOptions.noConsecutiveBlankLines) {\n        formattedCode = formattedCode.replace(/\\n+^$/mg, \"\\n\");\n    }\n\n    return formattedCode;\n}\n\nfunction createDefaultAdditionalFormatCodeOptions(): AdditionalFormatOptions {\n    \"use strict\";\n\n    return {\n        noConsecutiveBlankLines: false\n    };\n}\n"]}