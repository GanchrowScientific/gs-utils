{"version":3,"file":"utils.js","sourceRoot":"","sources":["utils.ts"],"names":["createDefaultFormatCodeOptions","getConfigFileName"],"mappings":"AAAA,YAAY,CAAC;AAEb,IAAY,EAAE,WAAM,YAAY,CAAC,CAAA;AAEjC,IAAY,EAAE,WAAM,IAAI,CAAC,CAAA;AACzB,IAAY,IAAI,WAAM,MAAM,CAAC,CAAA;AAE7B;IACIA,YAAYA,CAACA;IAEbA,MAAMA,CAACA;QACHA,UAAUA,EAAEA,CAACA;QACbA,OAAOA,EAAEA,CAACA;QACVA,WAAWA,EAAEA,EAAEA,CAACA,WAAWA,CAACA,KAAKA;QACjCA,gBAAgBA,EAAEA,MAAMA;QACxBA,mBAAmBA,EAAEA,IAAIA;QACzBA,8BAA8BA,EAAEA,IAAIA;QACpCA,wCAAwCA,EAAEA,IAAIA;QAC9CA,wCAAwCA,EAAEA,IAAIA;QAC9CA,+CAA+CA,EAAEA,IAAIA;QACrDA,oDAAoDA,EAAEA,KAAKA;QAC3DA,0DAA0DA,EAAEA,KAAKA;QACjEA,uDAAuDA,EAAEA,KAAKA;QAC9DA,mCAAmCA,EAAEA,KAAKA;QAC1CA,uCAAuCA,EAAEA,KAAKA;KACjDA,CAACA;AACNA,CAACA;AAnBe,sCAA8B,iCAmB7C,CAAA;AAED,2BAAkC,OAAe,EAAE,cAAsB;IACrEC,YAAYA,CAACA;IAEbA,IAAIA,cAAcA,GAAGA,IAAIA,CAACA,OAAOA,CAACA,OAAOA,EAAEA,cAAcA,CAACA,CAACA;IAC3DA,EAAEA,CAACA,CAACA,EAAEA,CAACA,UAAUA,CAACA,cAAcA,CAACA,CAACA,CAACA,CAACA;QAChCA,MAAMA,CAACA,cAAcA,CAACA;IAC1BA,CAACA;IAEDA,EAAEA,CAACA,CAACA,OAAOA,CAACA,MAAMA,KAAKA,IAAIA,CAACA,OAAOA,CAACA,OAAOA,CAACA,CAACA,MAAMA,CAACA,CAACA,CAACA;QAClDA,MAAMA,CAACA,IAAIA,CAACA;IAChBA,CAACA;IAEDA,MAAMA,CAACA,iBAAiBA,CAACA,IAAIA,CAACA,OAAOA,CAACA,OAAOA,EAAEA,KAAKA,CAACA,EAAEA,cAAcA,CAACA,CAACA;AAC3EA,CAACA;AAbe,yBAAiB,oBAahC,CAAA","sourcesContent":["\"use strict\";\n\nimport * as ts from \"typescript\";\n\nimport * as fs from \"fs\";\nimport * as path from \"path\";\n\nexport function createDefaultFormatCodeOptions(): ts.FormatCodeOptions {\n    \"use strict\";\n\n    return {\n        IndentSize: 4,\n        TabSize: 4,\n        IndentStyle: ts.IndentStyle.Smart,\n        NewLineCharacter: '\\r\\n',\n        ConvertTabsToSpaces: true,\n        InsertSpaceAfterCommaDelimiter: true,\n        InsertSpaceAfterSemicolonInForStatements: true,\n        InsertSpaceBeforeAndAfterBinaryOperators: true,\n        InsertSpaceAfterKeywordsInControlFlowStatements: true,\n        InsertSpaceAfterFunctionKeywordForAnonymousFunctions: false,\n        InsertSpaceAfterOpeningAndBeforeClosingNonemptyParenthesis: false,\n        InsertSpaceAfterOpeningAndBeforeClosingNonemptyBrackets: false,\n        PlaceOpenBraceOnNewLineForFunctions: false,\n        PlaceOpenBraceOnNewLineForControlBlocks: false\n    };\n}\n\nexport function getConfigFileName(baseDir: string, configFileName: string): string {\n    \"use strict\";\n\n    let configFilePath = path.resolve(baseDir, configFileName);\n    if (fs.existsSync(configFilePath)) {\n        return configFilePath;\n    }\n\n    if (baseDir.length === path.dirname(baseDir).length) {\n        return null;\n    }\n\n    return getConfigFileName(path.resolve(baseDir, \"../\"), configFileName);\n}\n"]}