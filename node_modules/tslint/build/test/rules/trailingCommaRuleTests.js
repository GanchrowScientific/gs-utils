var Lint = require("../lint");
describe("<trailing-comma>", function () {
    var TrailingCommaRule = Lint.Test.getRule("trailing-comma");
    var fileName = "rules/trailingcomma.test.ts";
    describe("multiline", function () {
        it("restricts the use of trailing commas if set to never", function () {
            var options = [true, { multiline: "never" }];
            var expectedFailure1 = Lint.Test.createFailure(fileName, [6, 2], [6, 3], TrailingCommaRule.FAILURE_STRING_NEVER);
            var expectedFailure2 = Lint.Test.createFailure(fileName, [5, 15], [5, 16], TrailingCommaRule.FAILURE_STRING_NEVER);
            var expectedFailure3 = Lint.Test.createFailure(fileName, [17, 11], [17, 12], TrailingCommaRule.FAILURE_STRING_NEVER);
            var expectedFailure4 = Lint.Test.createFailure(fileName, [27, 7], [27, 8], TrailingCommaRule.FAILURE_STRING_NEVER);
            var expectedFailure5 = Lint.Test.createFailure(fileName, [49, 7], [49, 8], TrailingCommaRule.FAILURE_STRING_NEVER);
            var expectedFailure6 = Lint.Test.createFailure(fileName, [59, 8], [59, 9], TrailingCommaRule.FAILURE_STRING_NEVER);
            var expectedFailure7 = Lint.Test.createFailure(fileName, [77, 11], [77, 12], TrailingCommaRule.FAILURE_STRING_NEVER);
            var actualFailures = Lint.Test.applyRuleOnFile(fileName, TrailingCommaRule, options);
            Lint.Test.assertFailuresEqual(actualFailures, [
                expectedFailure1,
                expectedFailure2,
                expectedFailure3,
                expectedFailure4,
                expectedFailure5,
                expectedFailure6,
                expectedFailure7
            ]);
        });
        it("enforces the use of trailing commas if set to always", function () {
            var options = [true, { multiline: "always" }];
            var expectedFailure1 = Lint.Test.createFailure(fileName, [13, 2], [13, 3], TrailingCommaRule.FAILURE_STRING_ALWAYS);
            var expectedFailure2 = Lint.Test.createFailure(fileName, [12, 15], [13, 1], TrailingCommaRule.FAILURE_STRING_ALWAYS);
            var expectedFailure3 = Lint.Test.createFailure(fileName, [22, 12], [23, 1], TrailingCommaRule.FAILURE_STRING_ALWAYS);
            var expectedFailure4 = Lint.Test.createFailure(fileName, [32, 6], [33, 1], TrailingCommaRule.FAILURE_STRING_ALWAYS);
            var expectedFailure5 = Lint.Test.createFailure(fileName, [54, 9], [55, 1], TrailingCommaRule.FAILURE_STRING_ALWAYS);
            var expectedFailure6 = Lint.Test.createFailure(fileName, [64, 10], [65, 1], TrailingCommaRule.FAILURE_STRING_ALWAYS);
            var expectedFailure7 = Lint.Test.createFailure(fileName, [82, 11], [83, 1], TrailingCommaRule.FAILURE_STRING_ALWAYS);
            var actualFailures = Lint.Test.applyRuleOnFile(fileName, TrailingCommaRule, options);
            Lint.Test.assertFailuresEqual(actualFailures, [
                expectedFailure1,
                expectedFailure2,
                expectedFailure3,
                expectedFailure4,
                expectedFailure5,
                expectedFailure6,
                expectedFailure7
            ]);
        });
    });
    describe("singleline", function () {
        it("restricts the use of trailing commas if set to never", function () {
            var options = [true, { singleline: "never" }];
            var expectedFailure1 = Lint.Test.createFailure(fileName, [35, 42], [35, 43], TrailingCommaRule.FAILURE_STRING_NEVER);
            var expectedFailure2 = Lint.Test.createFailure(fileName, [35, 40], [35, 41], TrailingCommaRule.FAILURE_STRING_NEVER);
            var expectedFailure3 = Lint.Test.createFailure(fileName, [39, 24], [39, 25], TrailingCommaRule.FAILURE_STRING_NEVER);
            var expectedFailure4 = Lint.Test.createFailure(fileName, [43, 17], [43, 18], TrailingCommaRule.FAILURE_STRING_NEVER);
            var expectedFailure5 = Lint.Test.createFailure(fileName, [67, 12], [67, 13], TrailingCommaRule.FAILURE_STRING_NEVER);
            var expectedFailure6 = Lint.Test.createFailure(fileName, [71, 14], [71, 15], TrailingCommaRule.FAILURE_STRING_NEVER);
            var expectedFailure7 = Lint.Test.createFailure(fileName, [85, 23], [85, 24], TrailingCommaRule.FAILURE_STRING_NEVER);
            var actualFailures = Lint.Test.applyRuleOnFile(fileName, TrailingCommaRule, options);
            Lint.Test.assertFailuresEqual(actualFailures, [
                expectedFailure1,
                expectedFailure2,
                expectedFailure3,
                expectedFailure4,
                expectedFailure5,
                expectedFailure6,
                expectedFailure7
            ]);
        });
        it("enforces the use of trailing commas in if set to always", function () {
            var options = [true, { singleline: "always" }];
            var expectedFailure1 = Lint.Test.createFailure(fileName, [37, 41], [37, 42], TrailingCommaRule.FAILURE_STRING_ALWAYS);
            var expectedFailure2 = Lint.Test.createFailure(fileName, [37, 40], [37, 41], TrailingCommaRule.FAILURE_STRING_ALWAYS);
            var expectedFailure3 = Lint.Test.createFailure(fileName, [41, 26], [41, 27], TrailingCommaRule.FAILURE_STRING_ALWAYS);
            var expectedFailure4 = Lint.Test.createFailure(fileName, [45, 15], [45, 16], TrailingCommaRule.FAILURE_STRING_ALWAYS);
            var expectedFailure5 = Lint.Test.createFailure(fileName, [69, 16], [69, 17], TrailingCommaRule.FAILURE_STRING_ALWAYS);
            var expectedFailure6 = Lint.Test.createFailure(fileName, [73, 18], [73, 19], TrailingCommaRule.FAILURE_STRING_ALWAYS);
            var expectedFailure7 = Lint.Test.createFailure(fileName, [87, 23], [87, 24], TrailingCommaRule.FAILURE_STRING_ALWAYS);
            var actualFailures = Lint.Test.applyRuleOnFile(fileName, TrailingCommaRule, options);
            Lint.Test.assertFailuresEqual(actualFailures, [
                expectedFailure1,
                expectedFailure2,
                expectedFailure3,
                expectedFailure4,
                expectedFailure5,
                expectedFailure6,
                expectedFailure7
            ]);
        });
    });
});
