var Lint = require("../lint");
describe("<semicolon>", function () {
    var SemicolonRule = Lint.Test.getRule("semicolon");
    var fileName = "rules/semicolon.test.ts";
    var failureString = SemicolonRule.FAILURE_STRING;
    var createFailure = function (start, end) {
        return Lint.Test.createFailure(fileName, start, end, failureString);
    };
    var actualFailures;
    before(function () {
        actualFailures = Lint.Test.applyRuleOnFile(fileName, SemicolonRule);
    });
    it("warns on all statements", function () {
        assert.equal(actualFailures.length, 20);
    });
    it("warns on variable statements", function () {
        Lint.Test.assertContainsFailure(actualFailures, createFailure([1, 10], [1, 10]));
        Lint.Test.assertContainsFailure(actualFailures, createFailure([25, 14], [25, 14]));
    });
    it("warns on expression statements", function () {
        Lint.Test.assertContainsFailure(actualFailures, createFailure([2, 7], [2, 7]));
        Lint.Test.assertContainsFailure(actualFailures, createFailure([5, 2], [5, 2]));
        Lint.Test.assertContainsFailure(actualFailures, createFailure([7, 19], [7, 19]));
        Lint.Test.assertContainsFailure(actualFailures, createFailure([9, 32], [9, 32]));
    });
    it("warns on return statements", function () {
        Lint.Test.assertContainsFailure(actualFailures, createFailure([12, 11], [12, 11]));
    });
    it("warns on break statements", function () {
        Lint.Test.assertContainsFailure(actualFailures, createFailure([17, 14], [17, 14]));
    });
    it("warns on continue statements", function () {
        Lint.Test.assertContainsFailure(actualFailures, createFailure([19, 17], [19, 17]));
    });
    it("warns on throw statements", function () {
        Lint.Test.assertContainsFailure(actualFailures, createFailure([22, 30], [22, 30]));
    });
    it("warns on do while statements", function () {
        Lint.Test.assertContainsFailure(actualFailures, createFailure([26, 16], [26, 16]));
    });
    it("warns on debugger statements", function () {
        Lint.Test.assertContainsFailure(actualFailures, createFailure([28, 9], [28, 9]));
    });
    it("warns on import and export statements", function () {
        Lint.Test.assertContainsFailure(actualFailures, createFailure([30, 24], [30, 24]));
        Lint.Test.assertContainsFailure(actualFailures, createFailure([32, 17], [32, 17]));
    });
    it("warns on use strict statements", function () {
        Lint.Test.assertContainsFailure(actualFailures, createFailure([36, 17], [36, 17]));
    });
    it("warns on property declarations", function () {
        Lint.Test.assertContainsFailure(actualFailures, createFailure([41, 25], [41, 25]));
        Lint.Test.assertContainsFailure(actualFailures, createFailure([42, 27], [42, 27]));
    });
    it("warns on interface declaration", function () {
        Lint.Test.assertContainsFailure(actualFailures, createFailure([47, 17], [47, 17]));
        Lint.Test.assertContainsFailure(actualFailures, createFailure([48, 16], [48, 16]));
    });
    it("warns on import statement", function () {
        Lint.Test.assertContainsFailure(actualFailures, createFailure([54, 34], [54, 34]));
    });
});
