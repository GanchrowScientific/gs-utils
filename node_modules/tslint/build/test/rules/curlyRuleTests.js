var Lint = require("../lint");
describe("<curly>", function () {
    var fileName = "rules/curly.test.ts";
    var CurlyRule = Lint.Test.getRule("curly");
    var actualFailures;
    before(function () {
        actualFailures = Lint.Test.applyRuleOnFile(fileName, CurlyRule);
    });
    it("ensures if statements are always braced", function () {
        var failureString = CurlyRule.IF_FAILURE_STRING;
        var expectedFailure = Lint.Test.createFailure(fileName, [10, 5], [11, 26], failureString);
        Lint.Test.assertContainsFailure(actualFailures, expectedFailure);
    });
    it("ensures for statements are always braced", function () {
        var failureString = CurlyRule.FOR_FAILURE_STRING;
        var expectedFailure1 = Lint.Test.createFailure(fileName, [22, 3], [23, 24], failureString);
        var expectedFailure2 = Lint.Test.createFailure(fileName, [25, 1], [26, 22], failureString);
        var expectedFailure3 = Lint.Test.createFailure(fileName, [67, 1], [68, 20], failureString);
        Lint.Test.assertContainsFailure(actualFailures, expectedFailure1);
        Lint.Test.assertContainsFailure(actualFailures, expectedFailure2);
        Lint.Test.assertContainsFailure(actualFailures, expectedFailure3);
    });
    it("ensures while statements are always braced", function () {
        var failureString = CurlyRule.WHILE_FAILURE_STRING;
        var expectedFailure1 = Lint.Test.createFailure(fileName, [37, 1], [38, 22], failureString);
        Lint.Test.assertContainsFailure(actualFailures, expectedFailure1);
    });
    it("ensures do statements are always braced", function () {
        var failureString = CurlyRule.DO_FAILURE_STRING;
        var expectedFailure1 = Lint.Test.createFailure(fileName, [50, 1], [52, 16], failureString);
        Lint.Test.assertContainsFailure(actualFailures, expectedFailure1);
    });
    it("ensures else statements are always braced", function () {
        var failureString = CurlyRule.ELSE_FAILURE_STRING;
        var expectedFailure = Lint.Test.createFailure(fileName, [56, 3], [56, 25], failureString);
        Lint.Test.assertContainsFailure(actualFailures, expectedFailure);
    });
    it("does not have false positives", function () {
        assert.lengthOf(actualFailures, 7);
    });
});
