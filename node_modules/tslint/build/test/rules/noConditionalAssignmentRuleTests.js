var Lint = require("../lint");
describe("<no-conditional-assignment>", function () {
    var fileName = "rules/nocondassign.test.ts";
    var NoConditionalAssignmentRule = Lint.Test.getRule("no-conditional-assignment");
    var createFailure = Lint.Test.createFailuresOnFile(fileName, NoConditionalAssignmentRule.FAILURE_STRING);
    var actualFailures;
    before(function () {
        actualFailures = Lint.Test.applyRuleOnFile(fileName, NoConditionalAssignmentRule);
    });
    it("should detect assignments in if conditionals", function () {
        var expectedFailure1 = createFailure([19, 5], [19, 10]);
        var expectedFailure2 = createFailure([20, 11], [20, 16]);
        var expectedFailure3 = createFailure([21, 10], [21, 15]);
        var expectedFailure4 = createFailure([31, 5], [31, 11]);
        var expectedFailure5 = createFailure([32, 16], [32, 23]);
        Lint.Test.assertContainsFailure(actualFailures, expectedFailure1);
        Lint.Test.assertContainsFailure(actualFailures, expectedFailure2);
        Lint.Test.assertContainsFailure(actualFailures, expectedFailure3);
        Lint.Test.assertContainsFailure(actualFailures, expectedFailure4);
        Lint.Test.assertContainsFailure(actualFailures, expectedFailure5);
    });
    it("should detect assignments in do-while conditionals", function () {
        var expectedFailure1 = createFailure([23, 15], [23, 20]);
        var expectedFailure2 = createFailure([34, 15], [34, 21]);
        Lint.Test.assertContainsFailure(actualFailures, expectedFailure1);
        Lint.Test.assertContainsFailure(actualFailures, expectedFailure2);
    });
    it("should detect assignments in while conditionals", function () {
        var expectedFailure1 = createFailure([25, 8], [25, 13]);
        var expectedFailure2 = createFailure([26, 9], [26, 19]);
        var expectedFailure3 = createFailure([35, 9], [35, 14]);
        var expectedFailure4 = createFailure([35, 33], [35, 38]);
        Lint.Test.assertContainsFailure(actualFailures, expectedFailure1);
        Lint.Test.assertContainsFailure(actualFailures, expectedFailure2);
        Lint.Test.assertContainsFailure(actualFailures, expectedFailure3);
        Lint.Test.assertContainsFailure(actualFailures, expectedFailure4);
    });
    it("should detect assignments in for conditionals", function () {
        var expectedFailure1 = createFailure([28, 17], [28, 22]);
        var expectedFailure2 = createFailure([29, 21], [29, 26]);
        Lint.Test.assertContainsFailure(actualFailures, expectedFailure1);
        Lint.Test.assertContainsFailure(actualFailures, expectedFailure2);
    });
    it("no false positives for rule", function () {
        assert.lengthOf(actualFailures, 13);
    });
});
