var Lint = require("../lint");
describe("<no-any>", function () {
    var fileName = "rules/noany.test.ts";
    var NoAnyRule = Lint.Test.getRule("no-any");
    var actualFailures = Lint.Test.applyRuleOnFile(fileName, NoAnyRule);
    var createFailure = Lint.Test.createFailuresOnFile(fileName, NoAnyRule.FAILURE_STRING);
    it("disallows variables with type 'any'", function () {
        var expectedFailures = [
            createFailure([1, 8], [1, 11]),
            createFailure([7, 8], [7, 11]),
            createFailure([8, 8], [8, 11])
        ];
        for (var _i = 0; _i < expectedFailures.length; _i++) {
            var failure = expectedFailures[_i];
            Lint.Test.assertContainsFailure(actualFailures, failure);
        }
    });
    it("disallows functions with parameter type 'any'", function () {
        var expectedFailure = createFailure([3, 17], [3, 20]);
        Lint.Test.assertContainsFailure(actualFailures, expectedFailure);
    });
    it("disallows functions with return type 'any'", function () {
        var expectedFailure = createFailure([3, 24], [3, 27]);
        Lint.Test.assertContainsFailure(actualFailures, expectedFailure);
    });
    it("catches destructuring bindings with member types of 'any'", function () {
        var expectedFailure = createFailure([10, 23], [10, 26]);
        Lint.Test.assertContainsFailure(actualFailures, expectedFailure);
    });
    it("finds the expected number of errors", function () {
        assert.equal(actualFailures.length, 6);
    });
});
