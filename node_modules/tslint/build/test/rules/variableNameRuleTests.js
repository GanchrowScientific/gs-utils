var Lint = require("../lint");
describe("<variable-name>", function () {
    var VariableNameRule = Lint.Test.getRule("variable-name");
    var failureString = VariableNameRule.FORMAT_FAILURE;
    var fileName = "rules/varname.test.ts";
    var createFailure = Lint.Test.createFailuresOnFile(fileName, failureString);
    it("ensures only (camel/upper)case naming convention for variables & parameters", function () {
        var expectedFailures = [
            createFailure([3, 5], [3, 17]),
            createFailure([4, 5], [4, 18]),
            createFailure([7, 13], [7, 26]),
            createFailure([8, 13], [8, 29]),
            createFailure([13, 13], [13, 25]),
            createFailure([19, 48], [19, 56]),
            createFailure([19, 58], [19, 68]),
            createFailure([24, 7], [24, 17]),
            createFailure([24, 19], [24, 30]),
            createFailure([24, 35], [24, 46]),
            createFailure([26, 56], [26, 69]),
            createFailure([26, 71], [26, 84]),
            createFailure([30, 43], [30, 54]),
            createFailure([34, 5], [34, 21]),
            createFailure([35, 5], [35, 19])
        ];
        var actualFailures = Lint.Test.applyRuleOnFile(fileName, VariableNameRule);
        Lint.Test.assertFailuresEqual(actualFailures, expectedFailures);
    });
    it("ensures leading underscores can optionally be legal", function () {
        var options = [true,
            "allow-leading-underscore"
        ];
        var actualFailures = Lint.Test.applyRuleOnFile(fileName, VariableNameRule, options);
        var optionallyValidFailures = [
            createFailure([8, 13], [8, 29])
        ];
        assert.isFalse(actualFailures.some(function (failure) {
            return optionallyValidFailures.some(function (f) { return f.equals(failure); });
        }));
    });
    it("ensures trailing underscores can optionally be legal", function () {
        var options = [true,
            "allow-trailing-underscore"
        ];
        var actualFailures = Lint.Test.applyRuleOnFile(fileName, VariableNameRule, options);
        var optionallyValidFailures = [
            createFailure([34, 5], [34, 21])
        ];
        assert.isFalse(actualFailures.some(function (failure) {
            return optionallyValidFailures.some(function (f) { return f.equals(failure); });
        }));
    });
    it("ensures leading & trailing underscores can optionally be legal", function () {
        var options = [true,
            "allow-leading-underscore",
            "allow-trailing-underscore"
        ];
        var actualFailures = Lint.Test.applyRuleOnFile(fileName, VariableNameRule, options);
        var optionallyValidFailures = [
            createFailure([35, 5], [35, 19])
        ];
        assert.isFalse(actualFailures.some(function (failure) {
            return optionallyValidFailures.some(function (f) { return f.equals(failure); });
        }));
    });
    it("ensures keywords can optionally be banned", function () {
        var file = "rules/varname-keywords.test.ts";
        var failure = Lint.Test.createFailuresOnFile(file, VariableNameRule.KEYWORD_FAILURE);
        var options = [true, "ban-keywords"];
        var expectedFailures = [
            failure([1, 5], [1, 14]),
            failure([2, 5], [2, 12]),
            failure([3, 14], [3, 17]),
            failure([4, 6], [4, 12]),
            failure([5, 6], [5, 12])
        ];
        var actualFailures = Lint.Test.applyRuleOnFile(file, VariableNameRule, options);
        Lint.Test.assertFailuresEqual(actualFailures, expectedFailures);
    });
});
