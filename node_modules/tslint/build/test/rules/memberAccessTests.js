var Lint = require("../lint");
describe("<member-access>", function () {
    it("ensures that class properties have access modifiers", function () {
        var fileName = "rules/memberaccess.test.ts";
        var expectedFailures = [
            [[2, 5], [2, 17]],
            [[10, 5], [10, 15]],
            [[16, 5], [16, 33]],
            [[17, 5], [17, 29]],
            [[29, 9], [29, 19]]
        ];
        assertFailuresInFile(fileName, expectedFailures);
    });
    it("ensures that constructors have access modifiers", function () {
        var fileName = "rules/memberaccess-constructor.test.ts";
        var expectedFailures = [
            [[2, 5], [2, 28]],
            [[3, 5], [3, 27]]
        ];
        var options = [true, "check-constructor"];
        assertFailuresInFile(fileName, expectedFailures, options);
    });
    it("ensures that accessors have access modifiers", function () {
        var fileName = "rules/memberaccess-accessor.test.ts";
        var expectedFailures = [
            [[2, 5], [4, 6]],
            [[5, 5], [5, 21]]
        ];
        var options = [true, "check-accessor"];
        assertFailuresInFile(fileName, expectedFailures, options);
    });
    function assertFailuresInFile(fileName, expectedFailures, options) {
        if (options === void 0) { options = [true]; }
        var MemberAccessRule = Lint.Test.getRule("member-access");
        var createFailure = Lint.Test.createFailuresOnFile(fileName, MemberAccessRule.FAILURE_STRING);
        var expectedFileFailures = expectedFailures.map(function (failure) { return createFailure(failure[0], failure[1]); });
        var actualFailures = Lint.Test.applyRuleOnFile(fileName, MemberAccessRule, options);
        Lint.Test.assertFailuresEqual(actualFailures, expectedFileFailures);
    }
});
