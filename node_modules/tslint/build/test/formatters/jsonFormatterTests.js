var Lint = require("../lint");
describe("JSON Formatter", function () {
    var TEST_FILE = "formatters/jsonFormatter.test.ts";
    var sourceFile;
    var formatter;
    before(function () {
        var Formatter = Lint.Test.getFormatter("json");
        sourceFile = Lint.Test.getSourceFile(TEST_FILE);
        formatter = new Formatter();
    });
    it("formats failures", function () {
        var maxPosition = sourceFile.getFullWidth();
        var failures = [
            new Lint.RuleFailure(sourceFile, 0, 1, "first failure", "first-name"),
            new Lint.RuleFailure(sourceFile, maxPosition - 1, maxPosition, "last failure", "last-name"),
            new Lint.RuleFailure(sourceFile, 0, maxPosition, "full failure", "full-name")
        ];
        var expectedResult = [{
                name: TEST_FILE,
                failure: "first failure",
                startPosition: {
                    position: 0,
                    line: 0,
                    character: 0
                },
                endPosition: {
                    position: 1,
                    line: 0,
                    character: 1
                },
                ruleName: "first-name"
            },
            {
                name: TEST_FILE,
                failure: "last failure",
                startPosition: {
                    position: maxPosition - 1,
                    line: 5,
                    character: 2
                },
                endPosition: {
                    position: maxPosition,
                    line: 6,
                    character: 0
                },
                ruleName: "last-name"
            },
            {
                name: TEST_FILE,
                failure: "full failure",
                startPosition: {
                    position: 0,
                    line: 0,
                    character: 0
                },
                endPosition: {
                    position: maxPosition,
                    line: 6,
                    character: 0
                },
                ruleName: "full-name"
            }];
        var actualResult = JSON.parse(formatter.format(failures));
        assert.deepEqual(actualResult, expectedResult);
    });
    it("handles no failures", function () {
        var result = JSON.parse(formatter.format([]));
        assert.deepEqual(result, []);
    });
});
