var Lint = require("../lint");
describe("Prose Formatter", function () {
    var TEST_FILE = "formatters/proseFormatter.test.ts";
    var sourceFile;
    var formatter;
    before(function () {
        var Formatter = Lint.Test.getFormatter("prose");
        sourceFile = Lint.Test.getSourceFile(TEST_FILE);
        formatter = new Formatter();
    });
    it("formats failures", function () {
        var maxPosition = sourceFile.getFullWidth();
        var failures = [
            new Lint.RuleFailure(sourceFile, 0, 1, "first failure", "first-name"),
            new Lint.RuleFailure(sourceFile, 32, 36, "mid failure", "mid-name"),
            new Lint.RuleFailure(sourceFile, maxPosition - 1, maxPosition, "last failure", "last-name")
        ];
        var expectedResult = TEST_FILE + getPositionString(1, 1) + "first failure\n" +
            TEST_FILE + getPositionString(2, 12) + "mid failure\n" +
            TEST_FILE + getPositionString(9, 2) + "last failure\n";
        var actualResult = formatter.format(failures);
        assert.equal(actualResult, expectedResult);
    });
    it("handles no failures", function () {
        var result = formatter.format([]);
        assert.equal(result, "\n");
    });
    function getPositionString(line, character) {
        return "[" + line + ", " + character + "]: ";
    }
});
