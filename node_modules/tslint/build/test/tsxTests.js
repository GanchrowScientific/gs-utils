var Lint = require("./lint");
describe("TSX syntax", function () {
    var fs = require("fs");
    var path = require("path");
    var fileName = "react.test.tsx";
    it("doesn't blow up linter", function () {
        var validConfiguration = {};
        var lintResult = runLinterWithConfiguration(validConfiguration);
        var parsedResult = JSON.parse(lintResult.output);
        assert.lengthOf(parsedResult, 0);
    });
    describe("catches common lint failures", function () {
        var lintResult = runLinterWithConfiguration({
            rules: {
                "curly": true,
                "eofline": true,
                "indent": [true, "spaces"],
                "max-line-length": true,
                "no-bitwise": true,
                "no-unreachable": true,
                "no-unused-expression": true,
                "no-unused-variable": true,
                "no-use-before-declare": true,
                "quotemark": [true, "double"],
                "semicolon": true,
                "whitespace": [true,
                    "check-branch",
                    "check-decl",
                    "check-operator",
                    "check-module",
                    "check-separator",
                    "check-type",
                    "check-typecast"
                ]
            }
        });
        var parsedResult = JSON.parse(lintResult.output);
        var actualFailures = [];
        for (var _i = 0; _i < parsedResult.length; _i++) {
            var failure = parsedResult[_i];
            var startArray = [failure.startPosition.line + 1, failure.startPosition.character + 1];
            var endArray = [failure.endPosition.line + 1, failure.endPosition.character + 1];
            actualFailures.push(Lint.Test.createFailure("tsx/" + fileName, startArray, endArray, failure.failure));
        }
        it("<indent>", function () {
            var IndentRule = Lint.Test.getRule("indent");
            var indentFailure = Lint.Test.createFailuresOnFile("tsx/" + fileName, IndentRule.FAILURE_STRING_SPACES);
            Lint.Test.assertContainsFailure(actualFailures, indentFailure([31, 1], [31, 2]));
        });
        it("<quotemark>", function () {
            var QuotemarkRule = Lint.Test.getRule("quotemark");
            var quotemarkFailure = Lint.Test.createFailuresOnFile("tsx/" + fileName, QuotemarkRule.DOUBLE_QUOTE_FAILURE);
            Lint.Test.assertContainsFailure(actualFailures, quotemarkFailure([1, 24], [1, 31]));
        });
        it("<whitespace>", function () {
            var WhitespaceRule = Lint.Test.getRule("whitespace");
            var whitespaceFailure = Lint.Test.createFailuresOnFile("tsx/" + fileName, WhitespaceRule.FAILURE_STRING);
            Lint.Test.assertContainsFailure(actualFailures, whitespaceFailure([16, 9], [16, 10]));
        });
        it("with no false positives", function () {
            assert.lengthOf(actualFailures, 3);
        });
    });
    function runLinterWithConfiguration(config) {
        var relativePath = path.join("test", "files", "tsx", fileName);
        var source = fs.readFileSync(relativePath, "utf8");
        var options = {
            configuration: config,
            formatter: "json",
            formattersDirectory: null,
            rulesDirectory: null
        };
        var ll = new Lint.Linter(relativePath, source, options);
        return ll.lint();
    }
});
