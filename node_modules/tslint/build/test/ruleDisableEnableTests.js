var Lint = require("./lint");
describe("Enable and Disable Rules", function () {
    var readFileSync = require("fs").readFileSync;
    var join = require("path").join;
    it("is enabled and disabled in all the right places", function () {
        var validConfiguration = { rules: {
                "variable-name": true,
                "quotemark": [true, "double"]
            } };
        var relativePath = join("test", "files", "enabledisable.test.ts");
        var source = readFileSync(relativePath, "utf8");
        var options = {
            configuration: validConfiguration,
            formatter: "json",
            formattersDirectory: null,
            rulesDirectory: null
        };
        var QuotemarkRule = Lint.Test.getRule("quotemark");
        var VariableNameRule = Lint.Test.getRule("variable-name");
        var quotemarkFailure = Lint.Test.createFailuresOnFile("enabledisable.test.ts", QuotemarkRule.DOUBLE_QUOTE_FAILURE);
        var variableNameFailure = Lint.Test.createFailuresOnFile("enabledisable.test.ts", VariableNameRule.FORMAT_FAILURE);
        var expectedFailure1 = variableNameFailure([2, 5], [2, 10]);
        var expectedFailure2 = variableNameFailure([10, 5], [10, 10]);
        var expectedFailure3 = quotemarkFailure([2, 13], [2, 19]);
        var expectedFailure4 = quotemarkFailure([8, 13], [8, 19]);
        var expectedFailure5 = quotemarkFailure([10, 13], [10, 19]);
        var expectedFailure6 = quotemarkFailure([16, 13], [16, 19]);
        var ll = new Lint.Linter(relativePath, source, options);
        var result = ll.lint();
        var parsedResult = JSON.parse(result.output);
        var actualFailures = [];
        for (var _i = 0; _i < parsedResult.length; _i++) {
            var failure = parsedResult[_i];
            var startArray = [failure.startPosition.line + 1, failure.startPosition.character + 1];
            var endArray = [failure.endPosition.line + 1, failure.endPosition.character + 1];
            actualFailures.push(Lint.Test.createFailure("enabledisable.test.ts", startArray, endArray, failure.failure));
        }
        Lint.Test.assertContainsFailure(actualFailures, expectedFailure1);
        Lint.Test.assertContainsFailure(actualFailures, expectedFailure2);
        Lint.Test.assertContainsFailure(actualFailures, expectedFailure3);
        Lint.Test.assertContainsFailure(actualFailures, expectedFailure4);
        Lint.Test.assertContainsFailure(actualFailures, expectedFailure5);
        Lint.Test.assertContainsFailure(actualFailures, expectedFailure6);
        assert.lengthOf(actualFailures, 6);
    });
});
