var Lint = require("./lint");
var configuration_1 = require("./configuration");
var Linter = (function () {
    function Linter(fileName, source, options) {
        this.fileName = fileName;
        this.source = source;
        this.options = options;
    }
    Linter.prototype.lint = function () {
        var failures = [];
        var sourceFile = Lint.getSourceFile(this.fileName, this.source);
        var rulesWalker = new Lint.EnableDisableRulesWalker(sourceFile, {
            disabledIntervals: [],
            ruleName: ""
        });
        rulesWalker.walk(sourceFile);
        var enableDisableRuleMap = rulesWalker.enableDisableRuleMap;
        var rulesDirectories = configuration_1.getRulesDirectories(this.options.rulesDirectory);
        var configuration = this.options.configuration.rules;
        var configuredRules = Lint.loadRules(configuration, enableDisableRuleMap, rulesDirectories);
        var enabledRules = configuredRules.filter(function (r) { return r.isEnabled(); });
        for (var _i = 0; _i < enabledRules.length; _i++) {
            var rule = enabledRules[_i];
            var ruleFailures = rule.apply(sourceFile);
            for (var _a = 0; _a < ruleFailures.length; _a++) {
                var ruleFailure = ruleFailures[_a];
                if (!this.containsRule(failures, ruleFailure)) {
                    failures.push(ruleFailure);
                }
            }
        }
        var formatter;
        var formattersDirectory = configuration_1.getRelativePath(this.options.formattersDirectory);
        var Formatter = Lint.findFormatter(this.options.formatter, formattersDirectory);
        if (Formatter) {
            formatter = new Formatter();
        }
        else {
            throw new Error("formatter '" + this.options.formatter + "' not found");
        }
        var output = formatter.format(failures);
        return {
            failureCount: failures.length,
            failures: failures,
            format: this.options.formatter,
            output: output
        };
    };
    Linter.prototype.containsRule = function (rules, rule) {
        return rules.some(function (r) { return r.equals(rule); });
    };
    Linter.VERSION = "3.1.1";
    Linter.findConfiguration = configuration_1.findConfiguration;
    return Linter;
})();
module.exports = Linter;
