var fs = require("fs");
var path = require("path");
var findup = require("findup-sync");
var CONFIG_FILENAME = "tslint.json";
var DEFAULT_CONFIG = {
    "rules": {
        "curly": true,
        "indent": [true, 4],
        "no-duplicate-key": true,
        "no-duplicate-variable": true,
        "no-empty": true,
        "no-eval": true,
        "no-trailing-whitespace": true,
        "no-unreachable": true,
        "no-use-before-declare": true,
        "quotemark": [true, "double"],
        "semicolon": true
    }
};
var moduleDirectory = path.dirname(module.filename);
function getRulesDirectories(directories) {
    var rulesDirectories = [];
    if (directories != null) {
        if (typeof directories === "string") {
            rulesDirectories = [getRelativePath(directories)];
        }
        else {
            rulesDirectories = directories.map(function (dir) { return getRelativePath(dir); });
        }
    }
    return rulesDirectories;
}
exports.getRulesDirectories = getRulesDirectories;
function getRelativePath(directory) {
    if (directory != null) {
        return path.relative(moduleDirectory, directory);
    }
}
exports.getRelativePath = getRelativePath;
function findConfiguration(configFile, inputFileLocation) {
    if (configFile == null) {
        configFile = findup("package.json", { cwd: inputFileLocation, nocase: true });
        if (configFile) {
            var content = require(configFile);
            if (content.tslintConfig) {
                return content.tslintConfig;
            }
        }
        var homeDir = getHomeDir();
        if (!homeDir) {
            return undefined;
        }
        var defaultPath = path.join(homeDir, CONFIG_FILENAME);
        configFile = findup(CONFIG_FILENAME, { cwd: inputFileLocation, nocase: true }) || defaultPath;
    }
    if (fs.existsSync(configFile)) {
        var fileData = fs.readFileSync(configFile, "utf8");
        fileData = fileData.replace(/^\uFEFF/, "");
        return JSON.parse(fileData);
    }
    else {
        return DEFAULT_CONFIG;
    }
}
exports.findConfiguration = findConfiguration;
function getHomeDir() {
    var environment = global.process.env;
    var paths = [
        environment.USERPROFILE,
        environment.HOME,
        environment.HOMEPATH,
        environment.HOMEDRIVE + environment.HOMEPATH
    ];
    for (var _i = 0; _i < paths.length; _i++) {
        var homePath = paths[_i];
        if (homePath != null && fs.existsSync(homePath)) {
            return homePath;
        }
    }
}
